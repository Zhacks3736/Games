<Module>
<ModulePrefs title="Google.com"/>
<Content type="html">
<![CDATA[ <!DOCTYPE html> <html lang="en-us"> <head> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"/> <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/papamamia/qarama@main/style.css"/> <style> /* Убираем выделение по нажатию клавиш */ canvas:focus { outline: none; } html, body { /* Убираем отступы */ padding: 0; margin: 0; /* Отключаем скролл и лонгтап на IOS */ overflow: hidden; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; -webkit-tap-highlight-color: rgba(0,0,0,0); /* Ставим высоту на 100% */ height: 100%; } </style> </head> <body class="dark"> <div id="unity-container" class="unity-desktop"> <canvas id="unity-canvas" tabindex="-1"></canvas> </div> <div id="loading-cover" style="display:none;"> <div id="unity-loading-bar"> <div id="unity-logo"><img src="https://cdn.jsdelivr.net/gh/papamamia/qarama@main/logo.png"></div>
 <div id="unity-progress-bar-empty" style="display: none;"> <div id="unity-progress-bar-full"></div> </div> <div class="spinner"></div> </div> </div> <script> 
const hideFullScreenButton = ""; 
const buildUrl = "https://cdn.jsdelivr.net/gh/papamamia/qarama@main/Build"; 
const loaderUrl = buildUrl + "/OSP.loader.js"; 
const config = { 
    frameworkUrl: buildUrl + "/OSP.framework.js.unityweb", 
    codeUrl: buildUrl + "/OSP.wasm.unityweb", 
    streamingAssetsUrl: "StreamingAssets", 
    companyName: "MiniPoP_Games", 
    productName: "Obby Snowboard Parkour Racing", 
    productVersion: "1.2.5" 
}; 
const container = document.querySelector("#unity-container"); 
const canvas = document.querySelector("#unity-canvas"); 
const loadingCover = document.querySelector("#loading-cover"); 
const progressBarEmpty = document.querySelector("#unity-progress-bar-empty"); 
const progressBarFull = document.querySelector("#unity-progress-bar-full"); 
const spinner = document.querySelector('.spinner'); 
const canFullscreen = (function () { 
    for (const key of [ 'exitFullscreen', 'webkitExitFullscreen', 'webkitCancelFullScreen', 'mozCancelFullScreen', 'msExitFullscreen', ]) { 
        if (key in document) { 
            return true; 
        } 
    } 
    return false; 
}()); 

// ** DELAY LOGIC UPDATED TO 10 SECONDS (10000ms) **
function delayGameStart() {
    // Wait for 10000 milliseconds (10 seconds) before showing the loading screen
    setTimeout(() => {
        // Фоновое изображение при загрузке игры. При сборке билда код меняется взависимости от настроек проекта. 
        loadingCover.style.background = "url('https://cdn.jsdelivr.net/gh/papamamia/qarama@main/background.png') center / cover"; 
        loadingCover.style.display = ""; 
    }, 10000); 
}
// ** END DELAY LOGIC **

document.addEventListener('contextmenu', event => event.preventDefault()); 
function FocusGame() { window.focus(); canvas.focus(); } 
window.addEventListener('pointerdown', FocusGame); 
window.addEventListener('touchstart', FocusGame); 
let StartUnityInstance; 
let myGameInstance; 
let ysdk = null; 
let cloudSaves = 'noData'; 
let paymentsData = 'none'; 
let playerData = 'noData'; 
let player = null; 
let payments = null; 
let initGame = false; 
let nowFullAdOpen = false; 

function GetPayments() { console.warn("GetPayments is not implemented"); return Promise.resolve("none"); } 
function SaveCloud() { console.warn("SaveCloud is not implemented"); } 
function LoadCloud() { console.warn("LoadCloud is not implemented"); return Promise.resolve("noData"); } 
function InitPlayer() { console.warn("InitPlayer is not implemented"); return Promise.resolve("noData"); } 
function FullAdShow() { try { if (!nowFullAdOpen) { nowFullAdOpen = true; if (initGame) { myGameInstance.SendMessage("YandexGame", "OpenFullAd"); } setTimeout(() => { nowFullAdOpen = false; if (initGame) { myGameInstance.SendMessage("YandexGame", "CloseFullAd", "true"); } FocusGame(); }, 500); } } catch (error) { } } 
function RewardedShow(rewardId) { try { myGameInstance.SendMessage("YandexGame", "RewardVideo", rewardId); function closeRewardedAd() { myGameInstance.SendMessage("YandexGame", "CloseRewardVideo"); FocusGame(); } closeRewardedAd(); } catch (error) { } } 
function StickyAdActivity() { console.warn("StickyAdActivity is not implemented"); } 
function Review() { console.warn("Review is not implemented"); } 
function PromptShow() { console.warn("PromptShow is not implemented"); } 
function InitLeaderboards() { console.warn("InitLeaderboards is not implemented"); } 
function GetLeaderboardScores() { console.warn("GetLeaderboardScores is not implemented"); } 
function SetLeaderboardScores() { console.warn("SetLeaderboardScores is not implemented"); } 
function ConsumePurchase() { console.warn("ConsumePurchase is not implemented"); } 
function ConsumePurchases() { console.warn("ConsumePurchases is not implemented"); } 

try { 
    const script = document.createElement("script"); 
    script.src = loaderUrl; 
    script.onload = async () => { 
        const partCount = 3; 
        const parts = []; 
        for (let i = 1; i <= partCount; i++) { 
            const partUrl = buildUrl + `/OSP.data_part${i}.unityweb`; 
            try { 
                const response = await fetch(partUrl); 
                if (!response.ok) { throw new Error(`Part ${i} yüklenemedi: ${response.statusText}`); } 
                const arrayBuffer = await response.arrayBuffer(); 
                parts.push(arrayBuffer); 
            } catch (error) { 
                console.error(error); 
                alert(`Hata: ${error.message}`); 
                return; 
            } 
        } 
        let totalLength = 0; 
        for (let ab of parts) { totalLength += ab.byteLength; } 
        const merged = new Uint8Array(totalLength); 
        let offset = 0; 
        for (let ab of parts) { merged.set(new Uint8Array(ab), offset); offset += ab.byteLength; } 
        const blob = new Blob([merged], { type: 'application/octet-stream' }); 
        const dataUrl = URL.createObjectURL(blob); 
        config.dataUrl = dataUrl; 
        
        StartUnityInstance = function () { 
            createUnityInstance(canvas, config, (progress) => { 
                spinner.style.display = "none"; 
                progressBarEmpty.style.display = ""; 
                progressBarFull.style.width = `${100 * progress}%`; 
            }).then((unityInstance) => { 
                myGameInstance = unityInstance; 
                loadingCover.style.display = "none"; 
            }).catch((message) => { 
                console.error("Unity yükleme hatası:", message); 
            }); 
        }; 
        
        StartUnityInstance(); 
        
        // ** START THE DELAY FUNCTION HERE **
        delayGameStart();

    }; 
    document.body.appendChild(script); 
} catch (error) { 
    console.error("Başlatma sırasında hata:", error); 
} 

function InitGame() { 
    try { 
        initGame = true; 
        if (nowFullAdOpen === true && myGameInstance != null) { 
            myGameInstance.SendMessage('YandexGame', 'OpenFullAd'); 
        } 
    } catch (error) { 
        console.error("InitGame sırasında hata:", error); 
    } 
} 
</script> 

<script> 
(function() { 
    const fakeFn = () => {}; 
    const fakePromise = () => Promise.resolve({ value: false, reason: "no_sdk" }); 
    window.sdk = window.sdk || { getPlayer: () => Promise.resolve({ getMode: () => "lite", getData: () => Promise.resolve({ data: "" }), setData: () => Promise.resolve(), }), feedback: { canReview: fakePromise, requestReview: fakePromise }, adv: { showRewardedVideo: fakePromise, showFullscreenAdv: fakePromise }, getLeaderboards: fakePromise, getPayments: fakePromise, }; 
    window.ysdk = window.ysdk || window.sdk; 
    window.YandexSDK = window.YandexSDK || {}; 
    window.YandexGame = window.YandexGame || {}; 
    window.showFullScreenAdv = window.showFullScreenAdv || fakeFn; 
    window.ShowInter = window.ShowInter || fakeFn; 
    window.ShowRewarded = window.ShowRewarded || fakeFn; 
    window.initPlayer = window.initPlayer || fakeFn; 
    window.auth = window.auth || fakeFn; 
    window.unityInstance = window.unityInstance || { SendMessage: function() { /* yok say */ } }; 
})(); 
</script> 

<style> 
/* Container: Top center, fixed, with overflow hidden */ 
#ad-container { position: fixed; top: 0; left: 50%; transform: translateX(-50%); width: min(728px, calc(100% - 20px)); /* 728px, 10px margin on mobile */ height: 90px; background: rgba(0, 0, 0, 0.90); display: none; z-index: 99999; border-radius: 0; /* Sharp corners */ overflow: hidden; box-shadow: 0 2px 12px rgba(0, 0, 0, 0.45); box-sizing: border-box; transition: transform 0.5s ease-in-out; /* Smooth slide-in/out animation */ } 
/* Slide-out animation */ 
#ad-container.hidden { transform: translate(-50%, -100%); /* Slide up out of view */ } 
#ad-iframe { position: absolute; top: 0; left: 50%; transform: translateX(-50%); width: 745px; /* Updated width */ height: 90px; /* Updated height */ border: 0; display: block; overflow: hidden; pointer-events: auto; box-sizing: content-box; -ms-overflow-style: none; scrollbar-width: none; } 
#ad-iframe::-webkit-scrollbar { display: none; width: 0; height: 0; } 
/* Close button with arrow */ 
#close-ad { position: absolute; top: 6px; right: 8px; background: #ff4d4d; color: #fff; border: none; padding: 5px 9px; font-size: 13px; border-radius: 4px; cursor: not-allowed; opacity: 0.72; z-index: 100000; display: flex; align-items: center; } 
#close-ad.enabled { cursor: pointer; opacity: 1; } 
#close-ad::before { content: '↑'; /* Up arrow */ margin-right: 4px; } 
/* Right mask for scrollbar */ 
#ad-right-mask { position: absolute; top: 0; right: 0; width: 12px; height: 100%; pointer-events: none; background: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.9)); z-index: 99999; } 
/* Mobile adjustments */ 
@media (max-width: 440px) { #ad-container { width: calc(100% - 12px); left: 50%; transform: translateX(-50%); border-radius: 0; /* Sharp corners on mobile */ } #ad-iframe { width: 708px; } } 
</style> 
<div id="ad-container" aria-hidden="true" role="dialog" aria-label="Advertisement"> 
    <iframe id="ad-iframe" src="https://script.google.com/macros/s/AKfycbwO0_-Mbrs-AoE1MqbBxyaIzK385M7xGx4jDkq-FDsbR9wNcqft1m3554Np5XINfbRViw/exec" width="768px" height="95px" scrolling="no" frameborder="0" sandbox="allow-scripts allow-popups allow-same-origin" ></iframe> 
    <button id="close-ad" disabled>Close (12)</button> 
    <div id="ad-right-mask"></div> 
</div> 
<script> 
(function () { 
    const showDelay = 9000; // 2 seconds delay before first show 
    const countdownStart = 12; // 12 seconds countdown 
    const reappearDelay = 25000; // 25 seconds before reappearance 
    const adContainer = document.getElementById('ad-container'); 
    const closeBtn = document.getElementById('close-ad'); 
    function showAd() { 
        adContainer.style.display = 'block'; 
        adContainer.classList.remove('hidden'); 
        adContainer.setAttribute('aria-hidden', 'false'); 
        let timeLeft = countdownStart; 
        closeBtn.textContent = `Close (${timeLeft})`; 
        closeBtn.disabled = true; 
        closeBtn.classList.remove('enabled'); 
        const t = setInterval(() => { 
            timeLeft--; 
            if (timeLeft > 0) { 
                closeBtn.textContent = `Close (${timeLeft})`; 
            } else { 
                clearInterval(t); 
                closeBtn.disabled = false; 
                closeBtn.classList.add('enabled'); 
                closeBtn.textContent = 'Close ↑'; 
            } 
        }, 1000); 
    } 
    setTimeout(showAd, showDelay); 
    closeBtn.addEventListener('click', () => { 
        if (closeBtn.disabled) return; 
        adContainer.classList.add('hidden'); 
        adContainer.setAttribute('aria-hidden', 'true'); 
        setTimeout(showAd, reappearDelay); 
    }); 
})(); 
</script> 
</body> </html> ]]>
</Content>
</Module>
